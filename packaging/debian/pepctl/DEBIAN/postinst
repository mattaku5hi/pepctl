#!/bin/bash
set -e

# Post-installation script for pepctl
# This script runs after the package is installed or upgraded

case "$1" in
    configure)
        # Create pepctl user and group if they don't exist
        if ! getent group pepctl >/dev/null; then
            echo "Creating pepctl group..."
            groupadd --system pepctl
        fi
        
        if ! getent passwd pepctl >/dev/null; then
            echo "Creating pepctl user..."
            useradd --system --gid pepctl --home-dir /run/pepctl \
                    --shell /usr/sbin/nologin --comment "PEPCTL daemon user" pepctl
        fi
        
        # Create necessary directories
        echo "Creating directories..."
        mkdir -p /etc/pepctl/configs/
        mkdir -p /etc/pepctl/policies
        mkdir -p /run/pepctl
        
        # Set proper ownership and permissions
        chown root:pepctl /etc/pepctl
        chmod 755 /etc/pepctl
        
        chown root:pepctl /etc/pepctl/policies
        chmod 755 /etc/pepctl/policies
        
        chown pepctl:pepctl /run/pepctl
        chmod 755 /run/pepctl
        
        # Copy production config to main config file if it doesn't exist
        if [ ! -f /etc/pepctl/configs/pepctl.conf ]; then
            echo "Installing default configuration..."
            if [ -f /usr/share/pepctl/production.json ]; then
                cp /usr/share/pepctl/production.json /etc/pepctl/configs/pepctl.conf
                chown root:pepctl /etc/pepctl/configs/pepctl.conf
                chmod 640 /etc/pepctl/configs/pepctl.conf
                echo "Configuration installed as /etc/pepctl/configs/pepctl.conf"
            else
                echo "Warning: Default configuration not found"
            fi
        else
            echo "Existing configuration found at /etc/pepctl/configs/pepctl.conf - not overwriting"
            # Backup existing config and show diff with new version
            if [ -f /usr/share/pepctl/production.json ]; then
                cp /etc/pepctl/configs/pepctl.conf /etc/pepctl/configs/pepctl.conf.backup.$(date +%Y%m%d-%H%M%S)
                echo "Your existing config has been backed up"
                echo "New default config is available at /usr/share/pepctl/production.json"
                echo "Please review and merge any new settings manually"
            fi
        fi
        
        # Install production policies if they don't exist
        if [ ! -f /etc/pepctl/policies/production.json ]; then
            echo "Installing default production policies..."
            if [ -f /usr/share/pepctl/policies/production.json ]; then
                cp /usr/share/pepctl/policies/production.json /etc/pepctl/policies/
                chown root:pepctl /etc/pepctl/policies/production.json
                chmod 640 /etc/pepctl/policies/production.json
                echo "Production policies installed"
            else
                echo "Warning: Default production policies not found"
            fi
        else
            echo "Existing production policies found - not overwriting"
            # Backup existing policies
            if [ -f /usr/share/pepctl/policies/production.json ]; then
                cp /etc/pepctl/policies/production.json /etc/pepctl/policies/production.json.backup.$(date +%Y%m%d-%H%M%S)
                echo "Your existing policies have been backed up"
                echo "New default policies are available at /usr/share/pepctl/policies/"
            fi
        fi
        
        # Install default environment file if it doesn't exist
        if [ ! -f /etc/default/pepctl ]; then
            echo "Installing default environment file..."
            cat > /etc/default/pepctl << 'EOF'
# PEPCTL Environment Configuration
# This file is sourced by the systemd service

# Log level: trace, debug, info, warn, error, critical
PEPCTL_LOG_LEVEL=info

# Interface to monitor (leave empty for auto-detection)
PEPCTL_INTERFACE=

# Additional command line options
PEPCTL_OPTS=
EOF
            chmod 644 /etc/default/pepctl
        fi
        
        # Reload systemd daemon to pick up new service file
        echo "Reloading systemd daemon..."
        systemctl daemon-reload
        
        # Enable and start the service
        echo "Enabling pepctl service..."
        systemctl enable pepctl
        
        echo "Starting pepctl service..."
        systemctl start pepctl
        
        # Check if BTF is available (required for modern eBPF)
        if [ -f /sys/kernel/btf/vmlinux ]; then
            echo "BTF support detected - eBPF programs will have full type information"
        else
            echo "Warning: BTF not available - some eBPF features may be limited"
            echo "Consider upgrading to a newer kernel with BTF support"
        fi
        
        # Verify BPF filesystem is mounted
        if ! mount | grep -q "bpffs on /sys/fs/bpf"; then
            echo "Mounting BPF filesystem..."
            mount -t bpf bpffs /sys/fs/bpf || true
            
            # Add to fstab if not already present
            if ! grep -q "bpffs" /etc/fstab; then
                echo "bpffs /sys/fs/bpf bpf defaults 0 0" >> /etc/fstab
                echo "Added BPF filesystem to /etc/fstab"
            fi
        fi
        
        # Set memory limits for BPF
        echo "Configuring BPF memory limits..."
        if [ -f /proc/sys/kernel/bpf_stats_enabled ]; then
            echo 1 > /proc/sys/kernel/bpf_stats_enabled 2>/dev/null || true
        fi
        
        # Configure systemd-journald for pepctl if needed
        if [ ! -f /etc/systemd/journald.conf.d/pepctl.conf ]; then
            echo "Configuring systemd journal for pepctl..."
            mkdir -p /etc/systemd/journald.conf.d
            cat > /etc/systemd/journald.conf.d/pepctl.conf << 'EOF'
# PEPCTL journald configuration
# Ensure pepctl logs are properly handled

[Journal]
# Keep pepctl logs for 30 days
MaxRetentionSec=30d

# Allow pepctl to use structured logging
ForwardToSyslog=no
ForwardToKMsg=no
ForwardToConsole=no
EOF
            systemctl restart systemd-journald || true
        fi
        
        echo "PEPCTL installation completed successfully!"
        echo ""
        echo "Configuration file: /etc/pepctl/configs/pepctl.conf"
        echo "Policies directory: /etc/pepctl/policies/"
        echo "Service status: systemctl status pepctl"
        echo "View logs: journalctl -u pepctl -f"
        echo ""
        echo "The service is now running. Check status with: systemctl status pepctl"
        ;;
        
    abort-upgrade|abort-remove|abort-deconfigure)
        # Nothing to do
        ;;
        
    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
        ;;
esac

exit 0 